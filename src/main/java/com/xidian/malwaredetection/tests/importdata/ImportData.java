package com.xidian.malwaredetection.tests.importdata;

import com.xidian.malwaredetection.dao.BenignHashSampleMapper;
import com.xidian.malwaredetection.dao.BenignSampleMapper;
import com.xidian.malwaredetection.dao.MalwareHashSampleMapper;
import com.xidian.malwaredetection.dao.MalwareSampleMapper;
import com.xidian.malwaredetection.model.*;
import com.xidian.malwaredetection.bloomfilter.FilterBuilder;
import com.xidian.malwaredetection.bloomfilter.HashProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.*;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

/**
 * @author wwt
 * @date 2019/8/23 16:21
 */

@Component
public class ImportData {
    private static transient Charset defaultCharset = Charset.forName("UTF-8");

    @Autowired
    BenignSampleMapper benignSampleMapper;
    @Autowired
    MalwareSampleMapper malwareSampleMapper;
    @Autowired
    BenignHashSampleMapper benignHashSampleMapper;
    @Autowired
    MalwareHashSampleMapper malwareHashSampleMapper;

    private double tm = 1.0;
    private double tn = 1.0;
    public static List<BenignSample> benignweight = new ArrayList<BenignSample>();
    public static List<MalwareSample> malwareweight = new ArrayList<MalwareSample>();

    public ImportData() {

    }

    public void importData(){

        LoadSample(tm,tn);

//        System.out.println(benignSampleMapper);

        for (BenignSample benignSample : benignweight){
            benignSampleMapper.insertSelective(benignSample);
        }
        for (MalwareSample malwareSample : malwareweight){
            malwareSampleMapper.insertSelective(malwareSample);
        }

    }

    public void test1(){
        System.out.println(benignweight);
    }

    public void importHashData(){

        FilterBuilder config = new FilterBuilder(100000,0.001).hashFunction(HashProvider.HashMethod.MD5).complete();

        List<BenignSample> benignSample = new ArrayList<BenignSample>();
        List<MalwareSample> malwareSample = new ArrayList<MalwareSample>();
        List<BenignHashSample> benignHashSamples = new ArrayList<BenignHashSample>();
        List<MalwareHashSample> malwareHashSamples = new ArrayList<MalwareHashSample>();

        BenignSampleExample benignSampleExample = new BenignSampleExample();
        BenignSampleExample.Criteria criteria = benignSampleExample.createCriteria();
        criteria.andIdIsNotNull();

        benignSample = benignSampleMapper.selectByExample(benignSampleExample);

        System.out.println("Size of bloom filter: " + config.size() + ", hash functions: " + config.hashes());

        String str = null;
        String hashSystemCall = "";
        int[] hash;
        byte[] bytes;
        for (BenignSample benign : benignSample){
            BenignHashSample benignHashSample = new BenignHashSample();
            hashSystemCall = "";
            str = benign.getSystemcall();
            bytes = str.getBytes(defaultCharset);
            hash = config.hashFunction().hash(bytes,config.size(),config.hashes());
//            System.out.println(Arrays.toString(hash));
            for (int i = 0; i < hash.length; i++) {
                hashSystemCall = hashSystemCall + " " + hash[i]+"";
            }
//            System.out.println(hashSystemCall);
            benignHashSample.setHashsystemcall(hashSystemCall);
            benignHashSample.setWeight(benign.getWeight());
//            System.out.println(benignHashSample);
            benignHashSamples.add(benignHashSample);
        }

//        System.out.println(benignHashSamples);
        for (BenignHashSample benignHashSample: benignHashSamples){
            benignHashSampleMapper.insertSelective(benignHashSample);
        }

        MalwareSampleExample malwareSampleExample = new MalwareSampleExample();
        MalwareSampleExample.Criteria criteria1 = malwareSampleExample.createCriteria();
        criteria1.andIdIsNotNull();

        malwareSample = malwareSampleMapper.selectByExample(malwareSampleExample);

        System.out.println("Size of bloom filter: " + config.size() + ", hash functions: " + config.hashes());

        for (MalwareSample malware : malwareSample){
            MalwareHashSample malwareHashSample = new MalwareHashSample();
            hashSystemCall = "";
            str = malware.getSystemcall();
            bytes = str.getBytes(defaultCharset);
            hash = config.hashFunction().hash(bytes,config.size(),config.hashes());
            for (int i = 0; i < hash.length; i++) {
                hashSystemCall = hashSystemCall + " " + hash[i]+"";
            }
            malwareHashSample.setHashsystemcall(hashSystemCall);
            malwareHashSample.setWeight(malware.getWeight());
            malwareHashSamples.add(malwareHashSample);
        }

        for (MalwareHashSample malwareHashSample: malwareHashSamples){
            malwareHashSampleMapper.insertSelective(malwareHashSample);
        }
    }

    public static void LoadSample(double tm,double tn){
        benignweight.clear();
        malwareweight.clear();
        List list = new ArrayList();
        BenignSample benignSample;
        MalwareSample malwareSample;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream("E:\\malwaredetection\\DataProcess\\benign\\SystemcallWeight\\BenignSampleLibrary.txt");
            InputStreamReader isp = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(isp);
            String line = null;
            while ((line = br.readLine())!=null){
                list = SubStringTwo(line);
                benignSample = new BenignSample((String) list.get(0),(Double.parseDouble((String )list.get(1))));
                if (benignSample.getWeight()>tn){
                    benignweight.add(benignSample);
                }
            }
            list.clear();
            fis = new FileInputStream("E:\\malwaredetection\\DataProcess\\malware\\SystemcallWeight\\MalwareSampleLibrary.txt");
            isp = new InputStreamReader(fis);
            br = new BufferedReader(isp);
            line = null;
            while ((line = br.readLine())!=null){
                list = SubStringTwo(line);
                malwareSample = new MalwareSample((String) list.get(0),(Double.parseDouble((String )list.get(1))));
                if (malwareSample.getWeight()>tm){
                    malwareweight.add(malwareSample);
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static List SubStringTwo(String line){
        List list = new ArrayList();
        int flag = 0;
        for(int i=0;i<line.length();i++){
            if(line.substring(i,i+1).equals(" ")){
                flag = i;
            }
        }
        list.add(line.substring(0,flag));
        list.add(line.substring(flag+1,line.length()));
        return list;
    }
}
