package com.xidian.malwaredetection.tests.bloomfilter;

import com.xidian.malwaredetection.bloomfilter.CreateCountingBloomFilter;
import com.xidian.malwaredetection.bloomfilter.FilterBuilder;
import com.xidian.malwaredetection.bloomfilter.HashProvider;
import com.xidian.malwaredetection.bloomfilter.countingbloomfilter.CountingBloomFilterMemory;
import org.junit.Test;

import java.nio.charset.Charset;
import java.util.*;

/**
 * @author wwt
 * @date 2019/8/23 10:19
 */
public class TestBloomFilter {

    private static transient Charset defaultCharset = Charset.forName("UTF-8");

    @Test
    public void testFilter(){
        CreateCountingBloomFilter createCountingBloomFilter = new CreateCountingBloomFilter(100000,0.1,HashProvider.HashMethod.MD5);

        createCountingBloomFilter.createFilter();

        CountingBloomFilterMemory countingBloomFilterMemory = createCountingBloomFilter.getCountingBloomFilterMemory();

        System.out.println("Size of bloom filter: " + countingBloomFilterMemory.getSize() + ", hash functions: " + countingBloomFilterMemory.getHashes());
        List<String> list = new ArrayList<>();
        list.add("skfdlaj;fk");
        list.add("sdjfjkdsgf;");
        countingBloomFilterMemory.addAll(list);

        System.out.println(countingBloomFilterMemory.contains("skfdlaj;fk"));
        countingBloomFilterMemory.clear();
    }

    @Test
    public void testHash(){
        CreateCountingBloomFilter createCountingBloomFilter = new CreateCountingBloomFilter(100000,0.001,HashProvider.HashMethod.MD5);
        FilterBuilder config = createCountingBloomFilter.getConfig();
        createCountingBloomFilter.createFilter();

        CountingBloomFilterMemory countingBloomFilterMemory = createCountingBloomFilter.getCountingBloomFilterMemory();
        BitSet bitSet = countingBloomFilterMemory.getBitSet();
        System.out.println("Size of bloom filter: " + countingBloomFilterMemory.getSize() + ", hash functions: " + countingBloomFilterMemory.getHashes());

        String str = "recvfrom->connect->recvfrom->sendmsg";

        System.out.println(str.length());

        byte [] bytes = str.getBytes(defaultCharset);

        System.out.println(Integer.numberOfLeadingZeros(config.size()));

        System.out.println(Arrays.toString(bytes));
        System.out.println(bytes.length);

        int [] hash = config.hashFunction().hash(bytes, config.size(), config.hashes());

        System.out.println(Arrays.toString(hash));

        countingBloomFilterMemory.add(hash);
        System.out.println("包含hash(wwt)？"+countingBloomFilterMemory.contains("wwt"));

        countingBloomFilterMemory.remove("wwt");
        System.out.println("包含hash(wwt)？"+countingBloomFilterMemory.contains("wwt"));

        countingBloomFilterMemory.add(hash);
        System.out.println("包含hash(wwt)？"+countingBloomFilterMemory.contains("wwt"));

        countingBloomFilterMemory.remove("wwt");
        System.out.println("包含hash(wwt)？"+countingBloomFilterMemory.contains("wwt"));
    }

    @Test
    public void testSystemCall(){
        String systemCall = "sendto->sendto->sendto->sendto->sendto" +
                "->sendto->recvfrom->recvfrom->recvfrom->recvfrom" +
                "->sendto->recvfrom->recvfrom";
        CreateCountingBloomFilter createCountingBloomFilter = new CreateCountingBloomFilter(10000,0.1,HashProvider.HashMethod.MD5);
        FilterBuilder config = createCountingBloomFilter.getConfig();
        createCountingBloomFilter.createFilter();

        CountingBloomFilterMemory countingBloomFilterMemory = createCountingBloomFilter.getCountingBloomFilterMemory();

        System.out.println("Size of bloom filter: " + countingBloomFilterMemory.getSize() + ", hash functions: " + countingBloomFilterMemory.getHashes());

        countingBloomFilterMemory.add(systemCall);

        byte[] bytes = systemCall.getBytes(defaultCharset);
        System.out.println(Arrays.toString(bytes));
        int[] hash = config.hashFunction().hash(bytes,config.size(),config.hashes());
        System.out.println(Arrays.toString(hash));
        System.out.println(countingBloomFilterMemory.contains(hash));
    }

    @Test
    public void testArrays(){
        int[] hash = {1,2,3,4,5};
        System.out.println(hash.length);
        System.out.println(Arrays.toString(hash));
        int[] hash2;
        hash2 = hash;
        System.out.println(Arrays.toString(hash2));

        Map<int[],Double> hashSys = new HashMap<int[], Double>();
        hashSys.put(hash,0.2);

    }
}
