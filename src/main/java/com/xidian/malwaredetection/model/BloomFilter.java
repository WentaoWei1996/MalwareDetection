package com.xidian.malwaredetection.model;

import com.xidian.malwaredetection.dao.BenignHashSampleMapper;
import com.xidian.malwaredetection.dao.MalwareHashSampleMapper;
import com.xidian.malwaredetection.bloomfilter.CreateCountingBloomFilter;
import com.xidian.malwaredetection.bloomfilter.countingbloomfilter.CountingBloomFilterMemory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author wwt
 * @date 2019/8/26 14:10
 */

@Service
public class BloomFilter {

    @Autowired
    BenignHashSampleMapper benignHashSampleMapper;
    @Autowired
    MalwareHashSampleMapper malwareHashSampleMapper;
    @Autowired
    CreateCountingBloomFilter createCountingBloomFilter;

    private CountingBloomFilterMemory benignBloomFilter;
    private CountingBloomFilterMemory malwareBloomFilter;

    private Map<String,Double> MW = new HashMap<String, Double>();
    private Map<String,Double> NW = new HashMap<String, Double>();

    public BloomFilter() {

    }

    public void initFilter(){
        benignBloomFilter = createCountingBloomFilter.createFilter().getCountingBloomFilterMemory();
        malwareBloomFilter = createCountingBloomFilter.createFilter().getCountingBloomFilterMemory();

        int[] hash;
        String[] str;

        BenignHashSampleExample benignHashSampleExample = new BenignHashSampleExample();
        BenignHashSampleExample.Criteria criteria = benignHashSampleExample.createCriteria();
        criteria.andIdIsNotNull();
        List<BenignHashSample> benignHashSamples = benignHashSampleMapper.selectByExample(benignHashSampleExample);
        for (BenignHashSample benignHashSample : benignHashSamples){
            NW.put(benignHashSample.getHashsystemcall(),benignHashSample.getWeight());
            str = benignHashSample.getHashsystemcall().split(" ");
            hash = StringToInt(str);
            benignBloomFilter.add(hash);
        }

        MalwareHashSampleExample malwareHashSampleExample = new MalwareHashSampleExample();
        MalwareHashSampleExample.Criteria criteria1 = malwareHashSampleExample.createCriteria();
        criteria1.andIdIsNotNull();
        List<MalwareHashSample> malwareHashSamples = malwareHashSampleMapper.selectByExample(malwareHashSampleExample);
        for (MalwareHashSample malwareHashSample : malwareHashSamples){
            MW.put(malwareHashSample.getHashsystemcall(),malwareHashSample.getWeight());
            str = malwareHashSample.getHashsystemcall().split(" ");
            hash = StringToInt(str);
            malwareBloomFilter.add(hash);
        }
    }

    public void setBenignBloomFilter(CountingBloomFilterMemory benignBloomFilter) {
        this.benignBloomFilter = benignBloomFilter;
    }

    public CountingBloomFilterMemory getBenignBloomFilter() {
        return benignBloomFilter;
    }

    public CountingBloomFilterMemory getMalwareBloomFilter() {
        return malwareBloomFilter;
    }

    public Map<String, Double> getMW() {
        return MW;
    }

    public Map<String, Double> getNW() {
        return NW;
    }

    public void setMalwareBloomFilter(CountingBloomFilterMemory malwareBloomFilter) {
        this.malwareBloomFilter = malwareBloomFilter;
    }

    public int[] StringToInt(String[] arrs){
        int[] ints = new int[arrs.length];

        for (int i = 0;i<arrs.length;i++){
            ints[i] = Integer.parseInt(arrs[i]);
        }
        return ints;
    }
}
