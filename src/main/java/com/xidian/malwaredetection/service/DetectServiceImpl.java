package com.xidian.malwaredetection.service;

import com.xidian.malwaredetection.dao.BenignHashSampleMapper;
import com.xidian.malwaredetection.dao.MalwareHashSampleMapper;
import com.xidian.malwaredetection.model.*;
import com.xidian.malwaredetection.bloomfilter.countingbloomfilter.CountingBloomFilterMemory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * @author wwt
 * @date 2019/8/22 9:42
 */

@Service
public class DetectServiceImpl implements DetectService {

    private static Double Mt = 0.1;
    private static Double Nt= 0.1;
    private static Double tm = 2.0;
    private static Double tn = 2.0;

    @Autowired
    BloomFilter bloomFilter;
    @Autowired
    MalwareHashSampleMapper malwareHashSampleMapper;
    @Autowired
    BenignHashSampleMapper benignHashSampleMapper;

    @Override
    public String detect(Map<String, Double> systemCall) {
        long startTime = 0;
        long endTime = 0;
        String result = null;

        int malnum = 0;
        int bennum = 0;

        Double QM = 0.0;
        Double QN = 0.0;

        CountingBloomFilterMemory malwareBF;
        CountingBloomFilterMemory benignBF;
        Map<String,Double> MW = new HashMap<String, Double>();
        Map<String,Double> NW = new HashMap<String, Double>();

        startTime = System.currentTimeMillis();

        if (bloomFilter.getBenignBloomFilter()==null){
            System.out.println("BloomFilter未初始化！");
            bloomFilter.initFilter();
        }else {
            System.out.println("BloomFilter已初始化！");
        }

//        System.out.println(bloomFilter);

        malwareBF = bloomFilter.getMalwareBloomFilter();
        benignBF = bloomFilter.getBenignBloomFilter();
        System.out.println("Size of malwareBF: " + malwareBF.getSize() + ", hash functions: " + malwareBF.getHashes());
        System.out.println("Size of benignBF: " + benignBF.getSize() + ", hash functions: " + benignBF.getHashes());

        MW = bloomFilter.getMW();
        NW = bloomFilter.getNW();

        MalwareHashSampleExample malwareHashSampleExample ;
        MalwareHashSampleExample.Criteria criteriaMal = null;

        BenignHashSampleExample benignHashSampleExample;
        BenignHashSampleExample.Criteria criteriaBen = null;


        int[] hash;
        String hashSystemCall = "";
        Double weight = 0.0;
        List<MalwareHashSample> foundMalSample;
        List<BenignHashSample> foundBenSample;
        Iterator<Map.Entry<String,Double>> iterator = systemCall.entrySet().iterator();

        String key = null;
        while (iterator.hasNext()){
            key = iterator.next().getKey();

//            if (MW.containsKey(key)){
            if (malwareBF.contains(key)){
                malnum++;
                weight = MW.get(key);
                if (weight > tm){
                    QM = QM + weight * systemCall.get(key);
                }
            }

//            if (NW.containsKey(key)){
            if (benignBF.contains(key)){
                bennum++;
                weight = NW.get(key);
                if (weight > tn){
                    QN = QN + weight * systemCall.get(key);
                }
            }
        }

/*        while (iterator.hasNext()){
            hashSystemCall = "";
            String str = iterator.next().getKey();
            hash = StringToInt(str.split(" "));

            if (malwareBF.contains(hash)){

                malnum++;

//                System.out.println("malBF包含："+str);
                for (int i = 0; i < hash.length; i++) {
                    hashSystemCall = hashSystemCall + " " + hash[i]+"";
                }

                if (MW.containsKey(hashSystemCall.substring(1,hashSystemCall.length()))){
                    weight = MW.get(hashSystemCall.substring(1,hashSystemCall.length()));
                    if (weight > tm){
                        QM = QM + weight * systemCall.get(str);
                    }
                }

//                malwareHashSampleExample = new MalwareHashSampleExample();
//                criteriaMal = malwareHashSampleExample.createCriteria();
//                criteriaMal.andHashsystemcallEqualTo(hashSystemCall.substring(1,hashSystemCall.length()));
//                foundMalSample = malwareHashSampleMapper.selectByExample(malwareHashSampleExample);
//
////                System.out.println("mal:"+hashSystemCall);
//
//                if (foundMalSample.size()>0){
//                    weight = foundMalSample.get(0).getWeight();
////                    System.out.println("weight"+weight);
//                    if (weight>tm){
//                        QM = QM + weight*systemCall.get(str);
////                        System.out.println(QM);
//                    }
//                }
            }

            hashSystemCall = "";

            if (benignBF.contains(hash)){

                bennum++;

//                System.out.println("benBF包含："+str);
                for (int i = 0; i < hash.length; i++) {
                    hashSystemCall = hashSystemCall + " " + hash[i]+"";
                }

                if (NW.containsKey(hashSystemCall.substring(1,hashSystemCall.length()))){
                    weight = NW.get(hashSystemCall.substring(1,hashSystemCall.length()));
                    if (weight > tn){
                        QN = QN + weight * systemCall.get(str);
                    }
                }

//                benignHashSampleExample = new BenignHashSampleExample();
//                criteriaBen = benignHashSampleExample.createCriteria();
//                criteriaBen.andHashsystemcallEqualTo(hashSystemCall.substring(1,hashSystemCall.length()));
//                foundBenSample = benignHashSampleMapper.selectByExample(benignHashSampleExample);
//
////                System.out.println("ben:"+hashSystemCall);
//
//                if (foundBenSample.size()>0){
//                    weight = foundBenSample.get(0).getWeight();
////                    System.out.println("weight"+weight);
//                    if (weight>tn){
//                        QN = QN + weight*systemCall.get(str);
////                        System.out.println(QN);
//                    }
//                }
            }
        }*/

        endTime = System.currentTimeMillis();

        System.out.println("匹配到" + malnum + "条恶意样本");
        System.out.println("匹配到" + bennum + "条正常样本");
        System.out.println("检测耗时："+(endTime-startTime));
//        System.out.println("QM:"+QM + " " + "Mt:" + Mt);
//        System.out.println("QN:"+QN + " " + "Nt:" + Nt );

        if (QM>Mt&&QN<Nt){
            System.out.println("恶意");
            result = "恶意软件，建议删除！";
        }else if (QM<Mt&&QN>Nt){
            System.out.println("正常");
            result = "正常软件";
        }else {
            System.out.println("灰色");
            result = "灰色软件";
        }

        System.out.println("======================================");

        return result;
    }

    public int[] StringToInt(String[] arrs){
        int[] ints = new int[arrs.length];

        for (int i = 0;i<arrs.length;i++){
            ints[i] = Integer.parseInt(arrs[i]);
        }
        return ints;
    }
}